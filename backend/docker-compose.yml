version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ethercart_db
      POSTGRES_USER: ${DB_USER:-ethercart}
      POSTGRES_PASSWORD: ${DB_PASS:-secret}
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redisdata:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=db
      - DB_NAME=ethercart_db
      - DB_USER=${DB_USER:-ethercart}
      - DB_PASS=${DB_PASS:-secret}
      - REDIS_HOST=redis
      - JWT_SECRET=${JWT_SECRET}
      - INFURA_ID=${INFURA_ID}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    ports:
      - '5000:5000'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend PWA
  pwa:
    build:
      context: .
      dockerfile: pwa/Dockerfile
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    ports:
      - '3000:3000'
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/_health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Optional: Nginx as reverse proxy (recommended for prod)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'  # Requires SSL setup
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs  # For HTTPS
    depends_on:
      - pwa
      - api
    # Remove if not using reverse proxy

volumes:
  pgdata:
  redisdata:
